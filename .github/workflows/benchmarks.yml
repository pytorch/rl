name: Continuous Benchmark
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - "*"
  workflow_dispatch:

permissions:
  id-token: write
  deployments: write
  contents: write
  pull-requests: write

concurrency:
  # Documentation suggests ${{ github.head_ref }}, but that's only available on pull_request/pull_request_target triggers, so using ${{ github.ref }}.
  # On master, we want all builds to complete even if merging happens faster to make it easier to discover at which point something broke.
  group: ${{ github.workflow }}-${{ github.ref == 'refs/heads/main' && format('ci-master-{0}', github.sha) || format('ci-{0}', github.ref) }}
  cancel-in-progress: true

jobs:

  benchmark:
    name: ${{ matrix.device }} Pytest benchmark
    runs-on: linux.g5.4xlarge.nvidia.gpu
    strategy:
      matrix:
        device: [CPU, GPU]
    defaults:
      run:
        shell: bash -l {0}
    container:
      image: nvidia/cuda:12.3.0-base-ubuntu22.04
      options: --gpus all
    steps:
      - name: Who triggered this?
        run: |
          echo "Action triggered by ${{ github.event.pull_request.html_url }}"
      - name: Check ldd --version
        run: ldd --version
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 50 # this is to make sure we obtain the target base commit
      - name: Python Setup
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Setup Environment
        run: |
          export TZ=Europe/London
          export DEBIAN_FRONTEND=noninteractive  # tzdata bug
          apt-get update -y
          apt-get install software-properties-common cmake -y
          add-apt-repository ppa:git-core/candidate -y
          apt-get update -y
          apt-get upgrade -y
          apt-get -y install libglu1-mesa libgl1-mesa-glx libosmesa6 gcc curl g++ unzip wget libglfw3-dev libgles2-mesa-dev libglew-dev sudo git cmake libz-dev libpython3.10-dev
      - name: Setup git
        run: |
          git config --global --add safe.directory /__w/rl/rl
          git config --global user.name "github-action-benchmark"
          git config --global user.email "github@users.noreply.github.com"
      - name: setup Path
        run: |
          echo /usr/local/bin >> $GITHUB_PATH
      - name: Setup benchmarks
        run: |
          echo "BASE_SHA=$(echo ${{ github.event.pull_request.base.sha }} | cut -c1-8)" >> $GITHUB_ENV
          echo "HEAD_SHA=$(echo ${{ github.event.pull_request.head.sha }} | cut -c1-8)" >> $GITHUB_ENV
          echo "BASELINE_JSON=$(mktemp)" >> $GITHUB_ENV
          echo "CONTENDER_JSON=$(mktemp)" >> $GITHUB_ENV
          echo "PR_COMMENT=$(mktemp)" >>  $GITHUB_ENV
      - name: Run
        run: |
          python3.10 -m venv --system-site-packages ./py310
          source ./py310/bin/activate
          export PYTHON_INCLUDE_DIR=/usr/include/python3.10
          ${{ matrix.device == 'CPU' && 'export CUDA_VISIBLE_DEVICES=' || '' }}

          python3.10 -m pip install --pre torch torchvision --index-url https://download.pytorch.org/whl/nightly/cu128 -U
          python3.10 -m pip install ninja pytest pytest-benchmark mujoco dm_control "gym[accept-rom-license,atari]"
          python3 -m pip install "pybind11[global]"
          python3.10 -m pip install git+https://github.com/pytorch/tensordict 
          python3.10 -m pip install safetensors tqdm pandas numpy matplotlib
          python3.10 setup.py develop

          # test import
          python3 -c """import torch
          assert torch.cuda.device_count()
          """

          cd benchmarks/
          export TORCHDYNAMO_INLINE_INBUILT_NN_MODULES=1
          export COMPOSITE_LP_AGGREGATE=0
          export TD_GET_DEFAULTS_TO_NONE=1
          python3 -m pytest -vvv --rank 0 --benchmark-json output.json --ignore test_collectors_benchmark.py

      # Upload benchmark results for main branch, manual dispatch, or PRs with 'benchmarks/upload' label
      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        if: ${{ github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch' || (github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'benchmarks/upload')) }}
        with:
          name: ${{ matrix.device }}-benchmark-results
          path: benchmarks/output.json

  # Upload benchmark results to gh-pages branch (only for main, manual dispatch, or PRs with 'benchmarks/upload' label)
  benchmark-upload:
    name: Upload benchmark results
    runs-on: ubuntu-latest
    needs: benchmark
    if: ${{ github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch' || (github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'benchmarks/upload')) }}
    steps:
      - name: Show upload trigger reason
        run: |
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "Uploading benchmarks because this is the main branch"
          elif [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "Uploading benchmarks because of manual workflow dispatch"
          elif [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "Uploading benchmarks because PR has 'benchmarks/upload' label"
          fi
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download CPU benchmark results
        uses: actions/download-artifact@v4
        with:
          name: CPU-benchmark-results
          path: cpu-results
      - name: Download GPU benchmark results
        uses: actions/download-artifact@v4
        with:
          name: GPU-benchmark-results
          path: gpu-results
      - name: Show benchmark results summary
        run: |
          echo "=== CPU Benchmark Results ==="
          if [ -f "cpu-results/output.json" ]; then
            echo "CPU results found and will be uploaded"
          else
            echo "No CPU results found"
          fi
          
          echo "=== GPU Benchmark Results ==="
          if [ -f "gpu-results/output.json" ]; then
            echo "GPU results found and will be uploaded"
          else
            echo "No GPU results found"
          fi
      - name: Store CPU benchmark results
        uses: benchmark-action/github-action-benchmark@v1
        with:
          name: CPU Benchmark Results
          tool: 'pytest'
          output-file-path: cpu-results/output.json
          fail-on-alert: true
          alert-threshold: '200%'
          alert-comment-cc-users: '@vmoens'
          # Disable PR comments to avoid permission issues with PR reviews
          comment-on-alert: false
          github-token: ${{ secrets.GITHUB_TOKEN }}
          gh-pages-branch: gh-pages
          auto-push: true
      - name: Store GPU benchmark results
        uses: benchmark-action/github-action-benchmark@v1
        with:
          name: GPU Benchmark Results
          tool: 'pytest'
          output-file-path: gpu-results/output.json
          fail-on-alert: true
          alert-threshold: '200%'
          alert-comment-cc-users: '@vmoens'
          # Disable PR comments to avoid permission issues with PR reviews
          comment-on-alert: false
          github-token: ${{ secrets.GITHUB_TOKEN }}
          gh-pages-branch: gh-pages
          auto-push: true
          # Use regular comments instead of PR reviews to avoid permission issues
          comment-style: 'github'
