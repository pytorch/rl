# This workflow builds the torchrl docs and deploys them to gh-pages.
name: Generate documentation
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - "*"
  workflow_dispatch:

concurrency:
  # Documentation suggests ${{ github.head_ref }}, but that's only available on pull_request/pull_request_target triggers, so using ${{ github.ref }}.
  # On master, we want all builds to complete even if merging happens faster to make it easier to discover at which point something broke.
  group: ${{ github.workflow }}-${{ github.ref == 'refs/heads/main' && format('ci-master-{0}', github.sha) || format('ci-{0}', github.ref) }}
  cancel-in-progress: true

jobs:
  unittests:
    strategy:
      matrix:
        python_version: ["3.9"]
        cuda_arch_version: ["12.1"]
    uses: pytorch/test-infra/.github/workflows/linux_job.yml@main
    with:
      repository: pytorch/rl
      runner: "linux.g5.4xlarge.nvidia.gpu"
      docker-image: "nvidia/cudagl:11.4.0-base"
      timeout: 120
      script: |
        apt-get update && apt-get install -y git wget gcc g++
        root_dir="$(pwd)"
        conda_dir="${root_dir}/conda"
        env_dir="${root_dir}/env"
        os=Linux
        
        # 1. Install conda at ./conda
        printf "* Installing conda\n"
        wget -O miniconda.sh "http://repo.continuum.io/miniconda/Miniconda3-latest-${os}-x86_64.sh"
        bash ./miniconda.sh -b -f -p "${conda_dir}"
        eval "$(${conda_dir}/bin/conda shell.bash hook)"
        printf "* Creating a test environment\n"
        conda create --prefix "${env_dir}" -y python=3.8
        printf "* Activating\n"
        conda activate "${env_dir}"
        
        # 2. upgrade pip, ninja and packaging
        apt-get install python3.8 python3-pip -y
        python3 -m pip install --upgrade pip
        python3 -m pip install setuptools ninja packaging -U
        
        # 3. check python version
        python3 --version
        
        # 4. Check git version
        git version
        
        # 5. Install PyTorch
        python3 -m pip install --pre torch torchvision --index-url https://download.pytorch.org/whl/nightly/cpu --quiet --root-user-action=ignore
        
        # 6. Install tensordict
        python3 -m pip install git+https://github.com/pytorch/tensordict.git --quiet --root-user-action=ignore
        
        # 7. Install TorchRL
        python3 setup.py develop
        
        # 8. Install requirements
        python3 -m pip install -r docs/requirements.txt --quiet --root-user-action=ignore
        
        # 9. Test torchrl installation
        mkdir _tmp
        cd _tmp
        PYOPENGL_PLATFORM=egl MUJOCO_GL=egl python3 -c """from torchrl.envs.libs.dm_control import DMControlEnv
        print(DMControlEnv('cheetah', 'run', from_pixels=True).reset())"""
        cd ..
        
        # 10. Build doc
        cd ./docs
        # timeout 7m bash -ic "MUJOCO_GL=egl sphinx-build ./source _local_build" || code=$?; if [[ $code -ne 124 && $code -ne 0 ]]; then exit $code; fi
        bash -ic "PYOPENGL_PLATFORM=egl MUJOCO_GL=egl sphinx-build ./source _local_build" || code=$?; if [[ $code -ne 124 && $code -ne 0 ]]; then exit $code; fi
        # PYOPENGL_PLATFORM=egl MUJOCO_GL=egl sphinx-build ./source _local_build
        cd ..

#    - name: Install rsync ðŸ“š
#      run: |
#        apt-get update && apt-get install -y rsync
#    - name: Pull TensorDict docs
#      run: |
#        git clone --branch gh-pages https://github.com/pytorch/tensordict.git docs/_local_build/tensordict
#        rm -rf docs/_local_build/tensordict/.git
#    - name: Get output time
#      run: echo "The time was ${{ steps.build.outputs.time }}"
#    - name: Upload wheel for download
#      uses: actions/upload-artifact@v2
#      with:
#        name: build
#        path: docs/_local_build/
#    - name: Deploy
#      if: ${{ github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch' }}
#      uses: JamesIves/github-pages-deploy-action@releases/v4
#      with:
#          token: ${{ secrets.GITHUB_TOKEN }}
#          branch: gh-pages # The branch the action should deploy to.
#          folder: docs/_local_build/ # The folder the action should deploy.
#          CLEAN: false

  upload-docs:
    needs: build_docs_job
    uses: pytorch/test-infra/.github/workflows/linux_job.yml@main
    with:
      runner: linux.2xlarge
      script: |
        cp -r docs/_local_build/* "${RUNNER_DOCS_DIR}"
