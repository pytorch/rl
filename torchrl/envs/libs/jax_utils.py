from typing import Union
import dataclasses

import numpy as np

import jax
from jax import numpy as jnp
from jax import dlpack as jax_dlpack

import torch
from torch.utils import dlpack as torch_dlpack
from tensordict.tensordict import make_tensordict, TensorDictBase


def tree_reshape(x, batch_size: torch.Size):
    shape, n = batch_size, 1
    return jax.tree_util.tree_map(lambda x: x.reshape(shape + x.shape[n:]), x)


def tree_flatten(x, batch_size: torch.Size):
    shape, n = (batch_size.numel(),), len(batch_size)
    return jax.tree_util.tree_map(lambda x: x.reshape(shape + x.shape[n:]), x)


_dtype_conversion = {
    np.dtype("uint16"): np.int16,
    np.dtype("uint32"): np.int32,
    np.dtype("uint64"): np.int64,
}

def ndarray_to_tensor(value: Union[jnp.ndarray, np.ndarray]) -> torch.Tensor:
    # JAX arrays generated by jax.vmap would have Numpy dtypes.
    if value.dtype in _dtype_conversion:
        value = value.view(_dtype_conversion[value.dtype])
    if isinstance(value, jnp.ndarray):
        dlpack_tensor = jax_dlpack.to_dlpack(value)
    elif isinstance(value, np.ndarray):
        dlpack_tensor = value.__dlpack__()
    else:
        raise NotImplementedError(f"unsupported data type {type(value)}")
    return torch_dlpack.from_dlpack(dlpack_tensor)


def tensor_to_ndarray(value: torch.Tensor) -> jnp.ndarray:
    return jax_dlpack.from_dlpack(torch_dlpack.to_dlpack(value))
 

def object_to_dict(obj) -> dict:
    if isinstance(obj, tuple) and hasattr(obj, "_fields"):  # named tuple
        return dict(zip(obj._fields, obj))
    elif dataclasses.is_dataclass(obj):
        return {
            field.name: getattr(obj, field.name) for field in dataclasses.fields(obj)
        }
    elif isinstance(obj, dict):
        return obj
    else:
        raise NotImplementedError(f"unsupported data type {type(obj)}")


def object_to_tensordict(obj, device, batch_size) -> TensorDictBase:
    """Converts a namedtuple or a dataclass to a TensorDict."""
    t = {}
    _dict = object_to_dict(obj)
    for name, value in _dict.items():
        if isinstance(value, (np.number, int, float)):
            t[name] = ndarray_to_tensor(np.asarray([value])).to(device)
        elif isinstance(value, (jnp.ndarray, np.ndarray)):
            t[name] = ndarray_to_tensor(value).to(device)
        else:
            t[name] = object_to_tensordict(value, device, batch_size)
    return make_tensordict(**t, device=device, batch_size=batch_size)


def tensordict_to_object(tensordict: TensorDictBase, object_example):
    """Converts a TensorDict to a namedtuple or a dataclass."""
    t = {}
    _dict = object_to_dict(object_example)
    for name in tensordict.keys():
        example = _dict[name]
        value = tensordict[name]
        if isinstance(value, TensorDictBase):
            t[name] = tensordict_to_object(value, example)
        else:
            value = jax_dlpack.from_dlpack(torch_dlpack.to_dlpack(value))
            t[name] = value.reshape(example.shape).view(example.dtype)
    return type(object_example)(**t)